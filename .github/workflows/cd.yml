name: Full Backend & Infra CD (App + Infra)

on:
  push:
    branches: [ "feature/60_deploy" ]
#  pull_request:
#    branches: [ "main" ]


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      #1.코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #2.JDK 설치 (필요 시)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      #3.Docker 로그인
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      #4.Docker 이미지 pull
      - name: Pull Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
          docker pull $IMAGE

      #5.EC2에 infra 폴더 전송
      - name: Copy infra folder to EC2
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: infra/**
          target: ~/livelihoodCoupon-backend/
          strip_components: 1

      #6.EC2에서 .env 생성 + start.sh 실행
      - name: Deploy and start services on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            DEPLOY_DIR=~/livelihoodCoupon-backend
            cd $DEPLOY_DIR

            echo "Creating .env file..."
            cat > .env <<EOL
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            REDIS_AOF=${{ secrets.REDIS_AOF }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }}
            SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }}
            PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }}
            GRAFANA_PORT=${{ secrets.GRAFANA_PORT }}
            GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            ELASTICSEARCH_HOST=${{ secrets.ELASTICSEARCH_HOST }}
            ELASTICSEARCH_PORT=${{ secrets.ELASTICSEARCH_PORT }}
            ELASTICSEARCH_SCHEME=${{ secrets.ELASTICSEARCH_SCHEME }}
            ELASTICSEARCH_TRANSPORT_PORT=${{ secrets.ELASTICSEARCH_TRANSPORT_PORT }}
            KIBANA_PORT=${{ secrets.KIBANA_PORT }}
            LOGSTASH_BEATS_PORT=${{ secrets.LOGSTASH_BEATS_PORT }}
            LOGSTASH_HTTP_PORT=${{ secrets.LOGSTASH_HTTP_PORT }}
            EOL
            
            echo "Stopping all services..."
            chmod +x ./infra/scripts/stop.sh
            ./infra/scripts/stop.sh || true
            
            echo "Starting services with start.sh..."
            chmod +x ./infra/scripts/start.sh
            ./infra/scripts/start.sh
            
            echo "Cleaning up unused Docker images..."
            docker image prune -af
            
            echo "Deployment completed!"
