# 현재는 H2 테스트만으로 진행함
# PostGIS 공간 데이터 활용하는 프로젝트로 고도화되었을 때
# 실제 PostgreSQL 컨테이너를 연동하는 통합 테스트를 추가하는 방향으로 추후 확장
name: livelihoodCoupon Java CI
on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업이 실행될 가상 환경을 지정합니다. (Ubuntu 최신 버전)
    runs-on: ubuntu-latest

    # 작업 내에서 실행될 단계(Step)들을 순서대로 정의합니다.
    steps:
      # 1. 레포지토리 코드 체크아웃
      # uses: 다른 사람이 만들어 둔 액션을 가져와 사용합니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 2. JDK 21 설치
      # Java 21 버전을 사용하도록 환경을 설정합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 캐싱 설정
      # Gradle 의존성을 캐싱하여 빌드 속도를 향상시킵니다.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 4. gradlew 실행 권한 부여
      # 셸 스크립트인 gradlew를 실행할 수 있도록 권한을 설정합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Checkstyle 실행
      # run: 셸 명령어를 직접 실행합니다.
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain

      # 6. 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # 7. 프로젝트 빌드
      # --no-daemon 옵션은 CI 환경에서 빌드 후 프로세스가 깔끔하게 종료되도록 보장합니다.
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # 8. 테스트 리포트 업로드
      - name: Upload Test Report
        # "실제 GitHub Actions 환경이고, 이전 단계의 성공/실패 여부와 상관없이" 실행하도록 설정
        # 'always()'는 이전 단계의 성공/실패 여부와 관계없이 항상 이 단계를 실행하라는 의미입니다.
        # 테스트가 실패해야 리포트가 더 의미있기 때문입니다.
        if: always() && github.actions == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-report # 업로드될 파일의 이름
          path: build/reports/tests/test/ # 테스트 리포트 파일 경로
          if-no-files-found: warn # 파일이 없으면 실패 대신 경고만 표시