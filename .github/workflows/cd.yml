name: Full Backend & Infra CD (Secrets + Env)

on:
  push:
    branches: [ "feature/60_deploy" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1.코드 체크아웃
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2.JDK 설치
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3.Gradle 빌드 (테스트 제외)
      - run: ./gradlew build -x test

      # 4.Docker 로그인
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5.Docker 이미지 빌드 & 푸시
      - run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
          docker build -t $IMAGE -f ./Dockerfile .
          docker push $IMAGE

      # 6.EC2 배포
      - uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/livelihoodCoupon-backend/infra/scripts

            echo "Stopping all services..."
            chmod +x ./stop.sh
            ./stop.sh
            
            echo "Generating .env file from GitHub Secrets..."
            cat > ~/livelihoodCoupon-backend/.env <<EOL
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            REDIS_AOF=${{ secrets.REDIS_AOF }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            SPRING_DATA_REDIS_HOST=${{ secrets.SPRING_DATA_REDIS_HOST }}
            SPRING_DATA_REDIS_PORT=${{ secrets.SPRING_DATA_REDIS_PORT }}
            PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }}
            GRAFANA_PORT=${{ secrets.GRAFANA_PORT }}
            GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            ELASTICSEARCH_HOST=${{ secrets.ELASTICSEARCH_HOST }}
            ELASTICSEARCH_PORT=${{ secrets.ELASTICSEARCH_PORT }}
            ELASTICSEARCH_SCHEME=${{ secrets.ELASTICSEARCH_SCHEME }}
            ELASTICSEARCH_TRANSPORT_PORT=${{ secrets.ELASTICSEARCH_TRANSPORT_PORT }}
            KIBANA_PORT=${{ secrets.KIBANA_PORT }}
            LOGSTASH_BEATS_PORT=${{ secrets.LOGSTASH_BEATS_PORT }}
            LOGSTASH_HTTP_PORT=${{ secrets.LOGSTASH_HTTP_PORT }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_EXPIRATION_ACCESS=${{ secrets.JWT_EXPIRATION_ACCESS }}
            JWT_EXPIRATION_REFRESH=${{ secrets.JWT_EXPIRATION_REFRESH }}
            OPENWEATHER_API_KEY=${{ secrets.WEATHER_SERVICE_KEY }}
            EOL
            
            echo ".env file generated successfully."
            
            echo "Starting all services..."
            chmod +x ./start.sh
            ./start.sh
            
            echo "Cleaning up unused Docker images..."
            docker image prune -af
            
            echo "Deployment completed successfully!"