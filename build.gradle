plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}

group = 'com.livelihoodCoupon'
version = '0.0.1-SNAPSHOT'
description = 'livelihoodCoupon'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

    //komoran
    google()
    maven { url = uri('https://jitpack.io') }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.mockito:mockito-core'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Testcontainers for integration tests with PostgreSQL
    testImplementation "org.testcontainers:testcontainers:1.20.5" // testcontainers
    testImplementation 'org.testcontainers:postgresql:1.20.5' // PostgreSQL 모듈
    testImplementation "org.testcontainers:junit-jupiter:1.20.5" // JUnit 5 연동

    // 로깅, 모니터링 관련
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // PostGIS 의존성, PostgreSQL 드라이버 추가
    implementation 'org.hibernate.orm:hibernate-spatial:6.5.2.Final'
    runtimeOnly 'org.postgresql:postgresql'

    // Spring Batch 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // Redis 캐싱 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    //dotenv env 환경변수 등록
    implementation 'io.github.cdimascio:dotenv-java:3.0.0' // 5.x가 아닌 안정된 3.x

    //단어 형태소 분석기
    implementation 'com.github.shin285:komoran:3.3.4'  // 최신 버전 확인 권장

    // Elasticsearch Java Client 8.x
    implementation 'co.elastic.clients:elasticsearch-java:8.14.0'  // 또는 최신 안정 버전

    //@Value 의존서 추가
    implementation 'org.springframework:spring-context'

    //offsetDatTime 매핑 추가
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

}

checkstyle {
    toolVersion = '11.0.0'
    configFile = rootProject.file('src/main/resources/codeConvention/Naver-CheckStyle-Rules.xml')
    ignoreFailures = false
    showViolations = true
}

tasks.withType(Checkstyle).configureEach {
    reports {
        html.required = true
        xml.required = false
        html.outputLocation = layout.buildDirectory.file("reports/checkstyle/${name}.html").get().asFile
    }
}

tasks.named('check') {
    dependsOn checkstyleMain
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('checkstyleTest') {
    enabled = false
}

